#!/usr/bin/env bash

#
# Script to wrap confluence cli to push/pull documents.
#

trap 'trap - EXIT; handle_error; ' ERR

# Defines required for the CLI. Can be set in ~/.streams.cfg

#server="https://mycompany.atlassian.net/wiki" # Your Confluence Server url to confluence.
#user="joesmoe" # What is your confluence username.
#docroot="${HOME}/confluence/" # Where do you want your docs created. Each project will create subdir.
#use_nailgun=YES # Set to something turns it on, otherwise unset it's disabled.
ccli=$(dirname $0)/confluence-cli-3.0.0/ # Or set to your confluence directory containing confluence.sh
jcli=$(dirname $0)/jira-cli-2.6.0/ # Or set to your confluence directory containing confluence.sh

cfg="${HOME}/.streams.cfg"

action=$1
shift

if [[ -f "$cfg" ]]; then
    source "$cfg"
fi

function handle_error {
    echo "Error hit"
    exit 2
}

function usage {
    cat <<EOF
Usage:
    ${0} <action>

actions:
--------------------------------------------------------------------------------------
push: Push a document to Confluence
pull: Pull a document from Confluence
fetch-all:Fetch all documents from a project
EOF
}

function detect-os {
    os="$(uname)"
}

function detect-distro {
    if [[ X${os}X == XLinuxX ]]; then
        distro="$(lsb_release -i|awk '{print $NF}')"
    fi
}

function ensure_not_empty {
    variable="$1"
    message="$2"

    if [[ X${variable}X = XX ]]; then
        echo "${message}"
        exit 2
    fi
}

if [[ -n "${ATLASSIAN_PASSWORD}" ]]; then
    password="${ATLASSIAN_PASSWORD}"
else
    echo -n "Password: "
    stty -echo
    read password
    stty echo
fi

ensure_not_empty "$password" "No password set in config or ENV."
ensure_not_empty "$server" "No \$server defined. "
ensure_not_empty "$user" "No \$user defined. This is your confluence userid"
ensure_not_empty "$docroot" "No \$docroot defined. This is where we download confluence docs"
ensure_not_empty "$ccli" "No \$ccli set. This is the full path to the parent directory of confluence.sh (the confluence-cli) directory"
detect-os
detect-distro

function nailgun-setup {
    if [[ X$(pgrep -lf nailgun)X == XX ]]; then
        # Find the jar from the ng package.
        case "$os" in
            "Darwin" ) # We assume brew and /usr/local install here.
                found_ng="$(find /usr/local -name "nailgun*jar"|head -n 1)"
                if [[ X${found_ng}X != XX ]]; then
                    jar="${found_ng}"
                else
                    "Nailgun setup to be used but not found. Please install 'brew install nailgun'"
                fi
                ;;
            "Linux"  )
                if [[ "$distro" == "Ubuntu" || "$distro" == "Debian" ]]; then
                    jar=$(dpkg -L nailgun|grep "n-[0-9].[0-9].[0-9].jar")
                fi
                ;;
            "Cygwin" )
                ;;
            * )
                echo "Could not find matching OS for nailgun support";;
        esac

        if [[ -n "${jar}" ]]; then
            echo "starting nailgun with ${jar}"
            nohup java -server -jar "${jar}" &
            sleep 5
        else
            echo "use_nailgun set, but no jar found. OS/Distro supported?"
        fi
    fi
}

if [[ -n "$use_nailgun" ]]; then
    nailgun-setup
fi


export IFS="
"

function fetch-all {
    for project in $(ls -F ${docroot}|grep /|tr -d "/"); do
        echo "Project: ${project}"
        for doc in $(${ccli}/confluence.sh --action getPageList --space "${project}" -u ${user} -p ${password} -s ${server}|grep -Ev "^$|pages in list"); do
            echo "Doc: ${doc}"
            time ${ccli}/confluence.sh --action getPageSource --space "${project}" --title "${doc}" -u ${user} -p ${password} -s ${server} |grep -v "^Page source$" > ${docroot}/${project}/"${doc/\//}"
        done
    done
    #cd ${docroot} && git add * && git commit -m "Update to $(date)" -a # if you wish to keep a local git copy
}

function list {
    ${ccli}/confluence.sh --action getSpaceList -u ${user} -p ${password} -s ${server}
}

function list_docs_by_project {
    ${ccli}/confluence.sh --action getPageList --space "ops" -u ${user} -p ${password} -s ${server}|grep -Ev "^$|pages in list"
}

function pull {
    filename="${1##*/}"
    a="${1%*/*}"
    project="${a##*/}"

    if [[ X${filename}X != XX ]]; then
        ${ccli}/confluence.sh --action getPageSource --space "${project}" --title "${filename}" -u ${user} -p ${password} -s ${server} |grep -v "^Page source$" > ${docroot}/${project}/"${filename}"
    fi
}

function get_space_info {
    filename="${1##*/}"
    a="${1%*/*}"
    project="${a##*/}"

    if [[ X${filename}X != XX ]]; then
        echo $(${ccli}/confluence.sh --action getSpace --space "${project}" -u ${user} -p ${password} -s ${server})
    fi
}

function push {
    filename="${1##*/}"
    a="${1%*/*}"
    project="${a##*/}"

    parent="$(get_space_info $@|awk '{print $4}'|tr -d ";") Home"

    if [[ X${filename}X != XX ]]; then
        echo "Put: project:${project} filename:${filename}"
        ${ccli}/confluence.sh --action storePage --space "${project}" --title "${filename}" --file "$1" -u ${user} -p ${password} -s ${server} --noConvert --parent "${parent}"
    else
        echo "No such file ${filename} in ${project}"
    fi
}

function list_tickets {

    project="Operations"
    server=${server%*/*}
    ${jcli}/jira.sh --action getIssueList -u ${user} --server ${server} -p ${password} --filter "my-tickets"

#./jira.sh -a login -u ${user} --server ${server} -p ${password}
# ./jira.sh --action getProject -u ${user} --server ${server} -p ${password} --project ${project}
# ./jira.sh --action createIssue -u ${user} --server ${server} -p ${password} --project ${project} --type "task" --summary "Random ticket test ${RANDOM} ." --labels "remote cli"

#./jira.sh --action progressIssue -u ${user} --server ${server} -p ${password} --project ${project} --issue "OP-3" --step "Start Progress" #--step "5" --resolution "Fixed" --fixVersions "V1, V2" --comment "I fixed this. \n It will be good now."
#./jira.sh --action progressIssue -u ${user} --server ${server} -p ${password} --project ${project} --issue "OP-3" --step "Reopened" #--step "5" --resolution "Fixed" --fixVersions "V1, V2" --comment "I fixed this. \n It will be good now."
# ./jira.sh --action progressIssue -u ${user} --server ${server} -p ${password} --project ${project} --issue "ZJIRACLI-3" --step "Start Progress"

}

case "${action}" in
    push)
        push $@;;
    pull)
        pull $@;;
    fetch-all)
        fetch-all $@;;
    get-space-info)
        get_space_info $@;;
    list_tickets)
        list_tickets  $@;;
   *)
        usage;;
esac
